{
  "manifestVersion": "3.1",
  "impls": {
    "3604b3d26db7b1ffae00584f7374fa70fc699213ab8f94928c184773915ef5bc": {
      "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "txHash": "0x12ad3fab38fb18071c33eb3b201d256127a3accabe5a8ce0be902ef8ac134537",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:78"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\ERC20UpgradeSafe.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts\\ERC20UpgradeSafe.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts\\ERC20UpgradeSafe.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts\\ERC20UpgradeSafe.sol:42"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts\\ERC20UpgradeSafe.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts\\ERC20UpgradeSafe.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "contracts\\ERC20UpgradeSafe.sol:316"
          },
          {
            "contract": "MUN",
            "label": "isFrozen",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MUN.sol:15"
          },
          {
            "contract": "MUN",
            "label": "transferFee",
            "type": "t_uint256",
            "src": "contracts\\MUN.sol:16"
          },
          {
            "contract": "MUN",
            "label": "lockLiquidityContract",
            "type": "t_address",
            "src": "contracts\\MUN.sol:17"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "208fcbe2fbbd937fc84d5c645c46e96272ba0e9d667e61a6c1a9f0427c382466": {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0x463d5c07d4fb296ee5d92dcd33d3d709543f26e906ab2edc16e4d57f752e4546",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:78"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\ERC20UpgradeSafe.sol:37"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "contracts\\ERC20UpgradeSafe.sol:39"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "contracts\\ERC20UpgradeSafe.sol:41"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "contracts\\ERC20UpgradeSafe.sol:42"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "contracts\\ERC20UpgradeSafe.sol:43"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "contracts\\ERC20UpgradeSafe.sol:44"
          },
          {
            "contract": "ERC20UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "contracts\\ERC20UpgradeSafe.sol:316"
          },
          {
            "contract": "MUS",
            "label": "isFrozen",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\MUS.sol:10"
          },
          {
            "contract": "MUS",
            "label": "nftManager",
            "type": "t_address",
            "src": "contracts\\MUS.sol:11"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e4f9e7b6000fc204980db683bb08b6fe5c839bc4830e9dfa4c555db6ee2f1a49": {
      "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      "txHash": "0xbac43cdacb04214238cb431c175073738f5a87234439f265b712dab8d14ac748",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:78"
          },
          {
            "contract": "LockLiquidity",
            "label": "amountLocked",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\LockLiquidity.sol:16"
          },
          {
            "contract": "LockLiquidity",
            "label": "lastPriceEarningsExtracted",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\LockLiquidity.sol:18"
          },
          {
            "contract": "LockLiquidity",
            "label": "lockingTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\LockLiquidity.sol:20"
          },
          {
            "contract": "LockLiquidity",
            "label": "liquidityProviderToken",
            "type": "t_address",
            "src": "contracts\\LockLiquidity.sol:22"
          },
          {
            "contract": "LockLiquidity",
            "label": "mun",
            "type": "t_address",
            "src": "contracts\\LockLiquidity.sol:24"
          },
          {
            "contract": "LockLiquidity",
            "label": "totalLiquidityLocked",
            "type": "t_uint256",
            "src": "contracts\\LockLiquidity.sol:26"
          },
          {
            "contract": "LockLiquidity",
            "label": "totalMunFeeMined",
            "type": "t_uint256",
            "src": "contracts\\LockLiquidity.sol:28"
          },
          {
            "contract": "LockLiquidity",
            "label": "munFeePrice",
            "type": "t_uint256",
            "src": "contracts\\LockLiquidity.sol:29"
          },
          {
            "contract": "LockLiquidity",
            "label": "accomulatedRewards",
            "type": "t_uint256",
            "src": "contracts\\LockLiquidity.sol:30"
          },
          {
            "contract": "LockLiquidity",
            "label": "pricePadding",
            "type": "t_uint256",
            "src": "contracts\\LockLiquidity.sol:31"
          },
          {
            "contract": "LockLiquidity",
            "label": "timeToExitLiquidity",
            "type": "t_uint256",
            "src": "contracts\\LockLiquidity.sol:32"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "af933ef002e98ccba576456f13d371c95b55cbad01828e2b829a39ecddcf3144": {
      "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
      "txHash": "0x65276bb3bf85eb5c92ef072cad0986ebc9cd24a71f2374615f1e040c1caaf570",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\access\\Ownable.sol:78"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\introspection\\ERC165.sol:21"
          },
          {
            "contract": "ERC165UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\introspection\\ERC165.sol:63"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2483_storage)",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:32"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2026_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:35"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:38"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:41"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:44"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:47"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:50"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:53"
          },
          {
            "contract": "ERC721UpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC721\\ERC721.sol:555"
          },
          {
            "contract": "NFTManager",
            "label": "timeStaked",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\NFTManager.sol:18"
          },
          {
            "contract": "NFTManager",
            "label": "amountStaked",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\NFTManager.sol:19"
          },
          {
            "contract": "NFTManager",
            "label": "blueprints",
            "type": "t_mapping(t_string_memory,t_array(t_uint256)4_storage)",
            "src": "contracts\\NFTManager.sol:26"
          },
          {
            "contract": "NFTManager",
            "label": "blueprintExists",
            "type": "t_mapping(t_string_memory,t_bool)",
            "src": "contracts\\NFTManager.sol:27"
          },
          {
            "contract": "NFTManager",
            "label": "myTokenURI",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts\\NFTManager.sol:29"
          },
          {
            "contract": "NFTManager",
            "label": "tokenURIs",
            "type": "t_array(t_string_storage)dyn_storage",
            "src": "contracts\\NFTManager.sol:30"
          },
          {
            "contract": "NFTManager",
            "label": "mintedTokenIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\NFTManager.sol:31"
          },
          {
            "contract": "NFTManager",
            "label": "lastId",
            "type": "t_uint256",
            "src": "contracts\\NFTManager.sol:32"
          },
          {
            "contract": "NFTManager",
            "label": "mun",
            "type": "t_address",
            "src": "contracts\\NFTManager.sol:33"
          },
          {
            "contract": "NFTManager",
            "label": "mus",
            "type": "t_address",
            "src": "contracts\\NFTManager.sol:34"
          },
          {
            "contract": "NFTManager",
            "label": "oneDayInBlocks",
            "type": "t_uint256",
            "src": "contracts\\NFTManager.sol:35"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_string_memory,t_array(t_uint256)4_storage)": {
            "label": "mapping(string => uint256[4])"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)4_storage": {
            "label": "uint256[4]"
          },
          "t_mapping(t_string_memory,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_struct(UintSet)2483_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)2483_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2204_storage"
              }
            ]
          },
          "t_struct(Set)2204_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2026_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1769_storage"
              }
            ]
          },
          "t_struct(Map)1769_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)1761_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)1761_storage)dyn_storage": {
            "label": "struct EnumerableMap.MapEntry[]"
          },
          "t_struct(MapEntry)1761_storage": {
            "label": "struct EnumerableMap.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  },
  "admin": {
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "txHash": "0x52c9be0ab70f72512f49bb48732a9065e7375148954544397ec32cd4022ff196"
  }
}
